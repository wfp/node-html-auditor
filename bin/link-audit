#! /usr/bin/env node

/**
 * @file html5-audit.js
 * @author Lasha Badashvili
 *
 * Scan HTML links (using broken-link-checker module).
 */

'use strict';

/**
 * Module dependencies.
 */
var format = require('util').format;
var fs = require('fs');
var colors = require('colors');
var argv = require('yargs').argv;
var report = require('../helpers/report');
var files = require('../helpers/files');
var BLC = require('broken-link-checker');

var _data = [];

try {
  // Get path to file.
  var path = argv.path;
  // Get report directory.
  var _report = argv.report;
  // Get base uri.
  var uri = argv['base-uri'];
  // Regex for uri.
  var regex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
  // Arguments condition.
  var condition = !_report || !path || !uri;
  if (condition) {
    throw new Error('Arguments are missing link-audit --path [path/to/file(s)] --report [path/to/report] --base-uri [URI]'.red);
  }
  if (!regex.test(uri)) {
    throw new Error(format('You entered incorrect base uri --base-uri %s'.red, uri));
  }
  // Get file(s).
  files(path, argv._, function(file) {
    // Get content.
    fs.readFile(file, 'utf-8', function(error, file) {
      if (error) {
        throw new Error(format('%s'.red, error));
      }
      // Test file.
      html.scan(file, uri);
    });
  });
}
catch (e) {
  // Log exception message.
  console.error(e.message);
};

/**
 * @instance Create BLC instance.
 */
var html = new BLC.HtmlChecker({}, {
  link: function(result) {
    // Store result in _data variable.
    _data.push(result);
    // Log links scanning.
    console.log('Scanning %s'.green, result.url.original);
  },
  complete: function() {
    // Create report.
    report(_data, _report, 'links-report.json');
  }
});
