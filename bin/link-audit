#! /usr/bin/env node

/**
 * @file html5-audit.js
 * @author Lasha Badashvili
 *
 * Scan HTML links (using broken-link-checker module).
 */

'use strict';

/**
 * Module dependencies.
 */
var format = require('util').format;
var url = require('url');
var fs = require('fs');
var colors = require('colors');
var argv = require('yargs').argv;
var report = require('../helpers/report');
var files = require('../helpers/files');
var BLC = require('broken-link-checker');

var _data = [];

try {
  // Get path to file.
  var path = argv.path;
  // Get report directory.
  var _report = argv.report;
  // Get base uri.
  var uri = argv['base-uri'];
  // Regex for uri.
  var regex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
  if (!path || !_report || !uri) {
    throw new Error('Arguments are missing link-audit --path [path/to/file(s)] --report [path/to/report] --base-uri [URI]'.red);
  }
  if (!regex.test(uri)) {
    throw new Error(format('You entered incorrect base uri --base-uri=%s'.red, uri));
  }
  // Get file(s).
  files(path, argv._, function(file) {
    // Get content.
    fs.readFile(file, 'utf-8', function(error, file) {
      if (error) {
        throw new Error(format('%s'.red, error));
      }
      // Test file.
      html.scan(file, uri);
    });
  });
}
catch (e) {
  // Log exception message.
  console.error(e.message);
};

/**
 * @instance Create BLC instance.
 */
var html = new BLC.HtmlChecker({ filterLevel: 3 }, {
  link: function(result) {
    // Get original url.
    var url = result.url.original;
    // Get base original url.
    var base = result.base.original;
    // Get links with 404 response.
    // Get links which has tag a & has base uri in href.
    // Get links which has internal & redirected property true.
    var condition = result.error
      || result.http.statusCode === 404
      || (result.html.tagName === 'a' && result.url.original.search(base) > -1)
      || (result.internal && result.url.redirected);
    if (condition) {
      // Log.
      console.error('Errors found for %s'.red, url);
      // Store result in _data variable.
      _data.push(result);
    }
    else {
      // Log.
      console.log('%s passed scan test successfuly.'.green, url);
    }
  },
  complete: function() {
    // Get _data variable length.
    var length = _data.length;
    if (length) {
      // Log.
      console.error('%d errors found.'.red, length);
      // Create report.
      report(_data, _report, 'links-report.json');
    }
    else {
      // Log.
      console.log('Congrats! 0 errors found.'.green);
    }
  }
});
