#! /usr/bin/env node

/**
 * @file html-fetch.js
 * @author Lasha Badashvili (lashab@picktek.com)
 *
 * Fetches sitemap URIs & downloads HTML content.
 */

'use strict';

/**
 * Module dependencies.
 */
var format = require('util').format;
var stream = require('stream');
var join = require('path').join;
var fs = require('fs');
var XMLStream = require('xml-stream');
var request = require('request');
var colors = require('colors');
var argv = require('yargs').argv;

var _map = {};

try {
  // Get uri.
  var uri = argv.uri;
  // Get directory.
  var dir = argv.dir;
  var map = argv.map;
  if (!uri || !dir) {
    throw new Error('Arguments are missing html-fetch --uri [URI] --dir [path/to/directory]'.red);
  }
  // Get sitemaps directory stats.
  fs.lstat(dir, function(error, stats) {
    if (error) {
      throw new Error(format('%s'.red, error));
    }
    if (stats.isDirectory()) {
      var regex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
      var data = '';
      var i = 0;
      // Check URI.
      uri = uri && regex.test(uri) ? uri : (function() {
        throw new Error(format('%s isn\'t valid uri, please provide correct --uri argument.'.red, uri));
      })();
      // Do HTTP call for sitemap XML URI.
      request(uri).on('data', function(string) {
        data += string;
      }).on('end', function() {
        var _stream = new stream.PassThrough();
        // Store data.
        _stream.end(data);
        var XML = new XMLStream(_stream);
        XML.on('endElement: loc', function(item) {
          // Download HTML content.
          download(item.$text, i, function() {
            // Get map directory stats.
            fs.lstat(map, function(error, stats) {
              if (error) {
                throw new Error(format('%s'.red, error));
              }
              if (stats.isDirectory()) {
                // Create map.json file.
                // Write - filename:url JSON object.
                var stream = fs.createWriteStream(join(map, 'map.json'));
                stream.write(JSON.stringify([_map]));
                stream.end();
              }
              else {
                throw new Error(format('%s isn\'t directory'.red, map));
              }
            });
          });
          i++;
        });
      }).on('error', function(error) {
        throw new Error(format('%s'.red, error));
      }).end();
    }
    else {
      throw new Error(format('%s isn\'t directory'.red, dir));
    }
  });
}
catch (e) {
  // Log exception.
  console.log(e.message);
};

/**
 * @callback download - Get HTML content & store in file.
 *
 * @param {String} url
 * @param {Number} key
 * @param {Function} callback
 */
function download(url, key, callback) {
  // Create unique filename.
  var filename = format('sitemap-%d.html', key);
  // Get directory.
  var dirctory = dir.replace(/\/$/, '');
  // Create write stream.
  var stream = fs.createWriteStream(join(dirctory, filename));
  // Store key:value of filename:url
  _map[filename] = url;
  // Do HTTP call for each of the URL & get HTML content.
  // Write HTML content in file.
  request(url).on('data', function(data) {
    // Write stream.
    stream.write(data);
  }).on('end', function() {
    callback(_map);
    // Stream - end.
    stream.end();
    // Log filename.
    console.log('%s has been added.', filename.green);
  }).on('error', function(error) {
    // Stream - close.
    stream.close();
    throw new Error(format('%s'.red, error));
  }).end();
};
