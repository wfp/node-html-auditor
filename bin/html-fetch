#! /usr/bin/env node

/**
* @file html-fetch.js
* @author Lasha Badashvili (lashab@picktek.com)
*
* Fetches sitemap.xml URIs & downloading HTML content.
*/

'use strict';

/**
 * Module dependencies.
 */
var format = require('util').format;
var stream = require('stream');
var http = require('http');
var join = require('path').join;
var url = require('url');
var fs = require('fs');
var XMLStream = require('xml-stream');
var colors = require('colors');
var smta = require('sitemap-to-array');
var argv = require('yargs').argv;

try {
  // Get uri.
  var uri = argv.uri;
  // Get directory.
  var dir = argv.dir;
  if (!uri || !dir) {
    throw new Error('Arguments are missing html-fetch --uri [URI] --dir [path/to/directory]'.red);
  }
  // Get dir stats.
  fs.lstat(dir, function(error, stats) {
    if (error) {
      throw new Error(format('%s'.red, error));
    }
    if (stats.isDirectory()) {
      // Regex for uri.
      var regex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
      // Check for sitemap URI validness.
      var condition = uri && regex.test(uri) && uri.indexOf('sitemap') > -1;
      uri = condition ? uri : (function() {
        throw new Error(format('%s isn\'t valid uri, please provide correct --uri argument.'.red, uri));
      })();
      var i = 0;
      // Get http | https.
      var _http = url.parse(uri).protocol.split(':')[0] || 'http';
      // Get sitemap content.
      require(_http).get(uri, function(response) {
        var data = '';
        response.on('data', function(string) {
          data += string;
        })
        .on('end', function() {
          var _stream = new stream.PassThrough();
          // Write your buffer
          _stream.end(data);
          var XML = new XMLStream(_stream);
          XML.on('endElement: loc', function(item) {
            // Do http call for each of the URL & get HTML content.
            // Create unique filename and append file with the HTML content.
            download(item.$text, i);
            i++;
          });
        });
      });
    }
    else {
      throw new Error('Directory %s couldn\'t be found.'.red);
    }
  });
}
catch (e) {
  // Log exception message.
  console.error(e.message);
}

/**
 * @callback download - Get HTML content & store in file.
 *
 * @param {String} url
 * @param {Number} key
 * @param {Function} callback
 */
function download(url, key) {
  // Create unique filename.
  var filename = format('sitemap-%d.html', key);
  // Get directory.
  var _dir = dir.replace(/\/$/, '');
  // HTTP call.
  http.get(url, function(response) {
    // Response - error event.
    response.on('error', function(error) {
      if (error) {
        throw new Error(format('%s'.red, error));
      }
    })
    // Response - data event - Get HTML content.
    .on('data', function(chunk) {
      if (chunk.length) {
        // Get chunk buffer and convert it to the HTML string.
        var data = chunk.toString();
        // Create file & write content.
        fs.appendFile(join('.', _dir, filename), data, function(error) {
          if (error) {
            throw new Error(format('%s'.red, error));
          }
        });
      }
    })
    .on('end', function() {
      // Log.
      console.log('%s has been added.', filename.green);
    });
  }).end();
};
