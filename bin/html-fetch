#! /usr/bin/env node

/**
 * @file html-fetch.js
 * @author Lasha Badashvili (lashab@picktek.com)
 *
 * Fetches sitemap URIs & downloads HTML content.
 */

'use strict';

/**
 * Module dependencies.
 */
var format = require('util').format;
var stream = require('stream');
var join = require('path').join;
var fs = require('fs');
var XMLStream = require('xml-stream');
var request = require('request');
var colors = require('colors');
var argv = require('yargs').argv;

process.on('uncaughtException', function (err) {
  process.stdout.write(err.message.red + '\n');
  process.exit(1);
});

var help = "html-fetch usage:\n" +
  "\thtml-fetch [options]\n" +
  "Options\n" +
  "\t--help                     Display this error message\n" +
  "\t--uri  [URI]  (required)   Path or URL to XML Sitemap file.\n" +
  "\t--dir  [path] (required)   Directory to output HTML files.\n" +
  "\t--map  [file] (optional)   File to output JSON that maps file names to URLs. If not set, sends to stdout\n";

if (argv.help) {
  process.stdout.write(help.yellow + '\n');
  process.exit(0);
}

var _map = {};
// Get uri.
var uri = argv.uri;
// Get directory.
var dir = argv.dir;
// Get map directory.
var map = argv.map;
if (!uri || !dir) {
  process.stdout.write(help.yellow + '\n');
  process.exit(0);
}
// Create directory.
process.umask(0);
fs.mkdir(dir, '0777', function(error) {
  var regex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
  var data = '';
  var i = 0;
  // Check URI.
  uri = uri && regex.test(uri) ? uri : (function() {
    throw new Error(format('%s isn\'t valid uri, please provide correct --uri argument.'.red, uri));
  })();
  // Do HTTP call for sitemap XML URI.
  request(uri).on('data', function(string) {
    data += string;
  }).on('end', function() {
    var _stream = new stream.PassThrough();
    // Store data.
    _stream.end(data);
    var XML = new XMLStream(_stream);
    XML.on('endElement: loc', function(item) {
      // Download HTML content.
      download(item.$text, i, function() {
        var data = JSON.stringify(_map);
        if (map && typeof map === 'string') {
          // Create directory.
          fs.mkdir(map, '0777', function(error) {
            // Create map.json file.
            // Write - filename:url JSON object.
            var stream = fs.createWriteStream(join(map, 'map.json'));
            stream.write(data);
            stream.end();
          });
        }
        else {
          // Log data.
          console.log(data);
        }
      });
      i++;
    });
  }).on('error', function(error) {
    throw new Error(format('%s'.red, error));
  }).end();
});

/**
 * @callback download - Get HTML content & store in file.
 *
 * @param {String} url
 * @param {Number} key
 * @param {Function} callback
 */
function download(url, key, callback) {
  // Create unique filename.
  var filename = format('sitemap-%d.html', key);
  // Get directory.
  var dirctory = dir.replace(/\/$/, '');
  // Create write stream.
  var stream = fs.createWriteStream(join(dirctory, filename));
  // Store key:value of filename:url
  _map[filename] = url;
  // Do HTTP call for each of the URL & get HTML content.
  // Write HTML content in file.
  request(url).on('data', function(data) {
    // Write stream.
    stream.write(data);
  }).on('end', function() {
    callback(_map);
    // Stream - end.
    stream.end();
    // Log filename.
    console.log('%s has been added.', filename.green);
  }).on('error', function(error) {
    // Stream - close.
    stream.close();
    throw new Error(format('%s'.red, error));
  }).end();
};
