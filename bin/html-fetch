#! /usr/bin/env node

/**
 * @file html-fetch.js
 * @author Lasha Badashvili
 *
 * Fetches sitemap.xml URIs & downloading HTML content.
 */

'use strict';

/**
 * Module dependencies.
 */
var format = require('util').format;
var http = require('http');
var join = require('path').join;
var fs = require('fs');
var colors = require('colors');
var smta = require('sitemap-to-array');
var argv = require('yargs').argv;

var _uris = [];

try {
  // Get uri.
  var uri = argv.uri;
  // Get directory.
  var dir = argv.dir;
  if (!uri || !dir) {
    throw new Error('Arguments are missing html-fetch --uri [URI] --dir [path/to/directory]'.red);
  }
  // Get dir stats.
  fs.lstat(dir, function(error, stats) {
    if (error) {
      throw new Error(format('%s'.red, error));
    }
    if (stats.isDirectory()) {
      // Regex for uri.
      var regex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
      // Check for sitemap URI validness.
      var condition = uri && regex.test(uri) && uri.indexOf('sitemap') > -1;
      uri = condition ? uri : (function() {
        throw new Error(format('%s isn\'t valid uri, please provide correct --uri argument.'.red, uri));
      })();
      // Parse sitemap XML.
      smta(uri, function(error, sitemaps) {
        if (error) {
          throw new Error(format('%s'.red, error));
        }
        sitemaps.forEach(function(sitemap, key) {
          // Extract all the sitemap URL.
          // Do http call for each of the URL & get HTML content.
          // Create unique filename and append file with the HTML content.
          download(sitemap, key, function(uri) {
            // Store uri in _uris variable.
            _uris.push(uri);
            if (sitemaps.length === _uris.length) {
              // Log when done.
              console.log('Download has completed.'.green);
              process.exit();
            }
          });
        });
      });
    }
    else {
      throw new Error('Directory %s couldn\'t be found.'.red);
    }
  });
}
catch (e) {
  // Log exception message.
  console.error(e.message);
}

/**
 * @callback download - Get HTML content & store in file.
 *
 * @param {Object} sitemap
 * @param {Number} key
 * @param {Function} callback
 */
function download(sitemap, key, callback) {
  // Create unique filename.
  var filename = format('sitemap-%d.html', key);
  // Get directory.
  var _dir = dir.replace(/\/$/, '');
  // Get sitemap URL.
  var _url = sitemap.loc;
  // HTTP call.
  http.get(_url, function(response) {
    // Response - error event.
    response.on('error', function(error) {
      if (error) {
        throw new Error(format('%s'.red, error));
      }
    })
    // Response - data event - Get HTML content.
    .on('data', function(chunk) {
      if (chunk.length) {
        // Get chunk buffer and convert it to the HTML string.
        var data = chunk.toString();
        // Create file & write content.
        fs.appendFile(join('.', _dir, filename), data, function(error) {
          if (error) {
            throw new Error(format('%s'.red, error));
          }
        });
      }
    })
    .on('end', function() {
      // Log files.
      console.log('%s has been added.', filename.green);
      setTimeout(function() {
        callback(filename);
      }, 1000);
    })
  }).end();
};
