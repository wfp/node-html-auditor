#! /usr/bin/env node

/**
 * @file a11y-audit.js
 * @author Lasha Badashvili (lashab@picktek.com)
 *
 * Scan HTML files (using pa11y module).
 */

'use strict';

/**
 * Module dependencies.
 */
var format = require('util').format;
var path = require('path');
var colors = require('colors');
var async = require('async');
var pa11y = require('pa11y');
var argv = require('yargs').argv;
var report = require('../helpers/report');
var files = require('../helpers/files');

var _data = {};

try {
  // Get path to file.
  var path = argv.path;
  // Get report directory.
  var _report = argv.report;
  // Get standard.
  var standard = argv.standard;
  // Get ignore.
  var ignore = argv.ignore;
  if (!_report || !path || !standard || !ignore) {
    throw new Error('Arguments are missing a11y-audit --path [path/to/file(s)] --report [path/to/report] --standard [STANDARD] --ignore notice;warning'.red);
  }
  // Get ignore object.
  ignore = ignore.split(';');
  // Prepare pa11y options.
  var options = {
    standard: standard,
    ignore: ignore,
    log: {
      debug: console.log.bind(console),
      error: console.error.bind(console),
      info: console.info.bind(console)
    }
  };
  var i = 1;
  // Instantiate pa11y.
  var _patty = pa11y(options);
  // Get file(s).
  files(path, argv._, function(file, length) {
    // Prepare _data object.
    _data[file] = _patty.run.bind(_patty, format('file://%s', file));
    if (i === length) {
      // Test file(s).
      async.series(_data, function(error, data) {
        if (error) {
          throw new Error(format('%s'.red, error));
        }
        // Create report.
        report({
          assessibility: data
        }, _report, 'a11y-report.json');
      });
    }
    i++;
  });
}
catch (e) {
  // Log exception message.
  console.log(e.message);
};
